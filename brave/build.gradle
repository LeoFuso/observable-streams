//file:noinspection GroovyAssignabilityCheck
//file:noinspection GrUnresolvedAccess
import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'org.springframework.boot' version '3.0.0' apply false
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java-library'

    id 'signing'
    id 'maven-publish'
}

dependencyManagement {
    imports {
        mavenBom SpringBootPlugin.BOM_COORDINATES
    }
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }
}

dependencies {

    api project(':commons')

    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation 'org.springframework.boot:spring-boot-actuator-autoconfigure'
    implementation 'org.springframework.boot:spring-boot-autoconfigure-processor'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'

    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    implementation 'io.zipkin.brave:brave-instrumentation-kafka-streams'

}

test {
    useJUnitPlatform()
}


compileJava {
    options.compilerArgs << '-parameters'
    inputs.files(tasks.named('processResources'))
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

publishing {

    publications {

        sonatype(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = group + ':' + name
                description = 'Micrometer extension for Kafka Streams instrumentation using ByteBuddy'
                url = 'https://github.com/leofuso/observable-streams'
                packaging 'jar'
                issueManagement {
                    system = 'GitHub Issue Tracking'
                    url = 'https://github.com/leofuso/observable-streams/issues'
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'leofuso'
                        name = 'Leonardo Fuso Nuzzo'
                        email = 'leonardofusonuzzo@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/leofuso/observable-streams.git'
                    developerConnection = 'scm:git:git@github.com:leofuso/observable-streams.git'
                    url = 'https://github.com/LeoFuso/observable-streams'
                }
            }
        }
    }
    repositories {
        var isSnapshot = version.endsWith('SNAPSHOT')
        if (isSnapshot) {
            maven {
                url = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                name = 'SonatypeSnapshot'
                credentials(PasswordCredentials.class)
            }
        } else {
            maven {
                url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
                name = 'SonatypeRelease'
                credentials(PasswordCredentials.class)
            }
        }
    }
}
